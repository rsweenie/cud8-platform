<?php

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\TypedData\Plugin\DataType\DateTimeIso8601;
use Drupal\Core\Url;
use Drupal\datetime\DateTimeComputed;
use Drupal\datetime_range\Plugin\Field\FieldType\DateRangeFieldItemList;
use Drupal\taxonomy\Entity\Term;
use Drupal\Component\Utility\Html as HtmlUtility;
use Drupal\Core\Render\Markup;
use Drupal\Core\Link;
use Drupal\Component\Render\HtmlEscapedText;
use Drupal\views\ViewExecutable;

function cu2019_grad_preprocess_page(&$variables) {
  $variables['logo_url'] = theme_get_setting('logo.url');
  $variables['svg_logo'] = _cu2019_grad_get_svg_logo();
}

function cu2019_grad_preprocess_node(&$variables) {
  $node = $variables['node'];

  $variables['breadcrumb_links'] = \Drupal::service('breadcrumb')->build(\Drupal::routeMatch())->getLinks();
  // Uncomment the following to test with empty breadcrumbs.
  //$variables['breadcrumb_links'] = FALSE;

  if ($node->bundle() == 'interior_page') {
    if ($node->hasField('field_interior_page_side_nav') && !$node->field_interior_page_side_nav->isEmpty()) {
      $variables['side_nav_type'] = $node->get('field_interior_page_side_nav')->getString();
      switch ($variables['side_nav_type']) {
        case 'siblings':
          // @TODO do we need to make adjustments to the cache tags?
          $variables['side_nav'] = _cu2019_grad_get_menu_sibling_tree();
          break;
      }
    }
  }
}

function cu2019_grad_preprocess_field__field_interior_page_content(&$variables) {
  $element = $variables['element'];

  if ($paragraphs = $element['#items']->referencedEntities()) {
    foreach ($variables['items'] as $key => &$item) {
      if (isset($paragraphs[$key])) {
        $item['attributes']->addClass('paragraph-type-' . $paragraphs[$key]->bundle());
      }
    }
  }
}

function cu2019_grad_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];
  $variables['par_id'] = $paragraph->id();
  $variables['par_type'] = $paragraph->getType();

  $variables['bundle'] = $paragraph->bundle;
  $variables['is_published'] = $paragraph->isPublished();

  $parent_field = $paragraph->get('parent_field_name')->value;
  $variables['parent'] = $parent_field;

  if ($paragraph->hasField('field_fwp_color') && !$paragraph->field_fwp_color->isEmpty()) {
    $variables['bg_style'] = $paragraph->get('field_fwp_color')->getString();
    switch ($variables['bg_style']) {
      case 'grey':
        $variables['overlay'] = 'bg-grey';
        break;
      default:
        $variables['overlay'] = 'bg-blue';
        break;
    }
  }

  $variables['bg_class'] = 'bg-secondary';
  if ($paragraph->hasField('field_stat_highlite_style') && !$paragraph->field_stat_highlite_style->isEmpty()) {
    $variables['bg_style'] = $paragraph->get('field_stat_highlite_style')->getString();
    switch ($variables['bg_style']) {
      case 'color2':
        $variables['bg_class'] = 'bg-primary';
        break;
      case 'color3':
        $variables['bg_class'] = 'bg-gray2';
        break;
      default:
        $variables['bg_class'] = 'bg-secondary';
        break;
    }
  }

  if ($paragraph->hasField('field_mfsfa_type') && !$paragraph->field_mfsfa_type->isEmpty()) {
    $variables['mfsfa_type'] = $paragraph->get('field_mfsfa_type')->getString();
    switch ($variables['mfsfa_type']) {
      case 'optionFaculty':
        $variables['highlite_tag'] = 'Faculty Spotlight';
        break;
      case 'optionAlumni':
        $variables['highlite_tag'] = 'Alumni Spotlight';
        break;
    }
  }

  if ($paragraph->hasField('field_next_step_icon') && !$paragraph->field_next_step_icon->isEmpty()) {
    $variables['icon'] = $paragraph->get('field_next_step_icon')->getString();
  }

  if ($paragraph->hasField('field_mfsi_source_type') && !$paragraph->field_mfsi_source_type->isEmpty()) {
    $variables['mfs_type'] = $paragraph->get('field_mfsi_source_type')->getString();
    switch($variables['mfs_type']) {
      case 'Blog':
        $variables['mfs_icon'] = 'icon icon-blog';
        break;
      case 'News':
        $variables['mfs_icon'] = 'icon icon-news';
        break;
      case 'Event':
        $variables['mfs_icon'] = 'icon icon-event-calendar';
        break;
    }
  }

  if ($paragraph->hasField('field_mfse_date')) {
    /** @var DateRangeFieldItemList $field */
    $dateRange = $paragraph->get('field_mfse_date')->first();
    $start_date = $dateRange->get('value')->getValue();
    $end_date = $dateRange->get('end_value')->getValue();

    $variables['multi_day'] = ($start_date != $end_date)? TRUE : FALSE;
    list($variables['start_month'], $variables['start_day']) = explode(' ', $dateRange->get('start_date')->getValue()->format('M j'));
  }

  if ($paragraph->getType() == 'image_video') {
    if ($paragraph->hasField('field_image_video_media') && !$paragraph->field_image_video_media->isEmpty()) {
      if ($media = $paragraph->field_image_video_media->referencedEntities()) {
        $media = reset($media);
        $variables['media_type'] = $media->bundle();

        // If this is a video, try to fetch the required render array.
        if ($media->bundle() == 'video') {
          $provider_manager = \Drupal::service('video_embed_field.provider_manager');
          $provider = $provider_manager->loadProviderFromInput($media->field_media_video_embed_field->value);
          if ($provider) {
            $video =  $provider->renderEmbedCode(560, 315, FALSE);
            $variables['video'] = $video;
          }
        }
      }
    }
  }

  if ($paragraph->getType() == 'formatted_text') {
    if ($paragraph->hasField('field_formatted_text_style') && !$paragraph->field_formatted_text_style->isEmpty()) {
      $style = $paragraph->field_formatted_text_style->getString();
      if ($style == 'collapsed') {
        $variables['collapsed_text'] = TRUE;
      }
    }
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function cu2019_grad_theme_suggestions_field_alter(&$suggestions, $variables) {
  $element = $variables['element'];

  $field_name = $element['#field_name'];
  $view_mode = $element['#view_mode'];
  $entity_type = $element['#entity_type'];
  $bundle = $element['#bundle'];

  // Add view mode based suggestions if this view mode doesn't use layout builder.
  if (strpos($view_mode, 'layout_builder-') !== 0) {
    $suggestions[] = 'field__' . $field_name . '__' . $view_mode;
    $suggestions[] = 'field__' . $entity_type . '__' . $field_name . '__' . $view_mode;
    $suggestions[] = 'field__' . $entity_type . '__' . $field_name . '__' . $bundle . '__' . $view_mode;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_field(&$variables) {
  // Get the URL of the parent entity.
  if (!empty($variables['element']['#object'])) {
    $entity = $variables['element']['#object'];

    // In the case of a paragraph we actually want the parent entity.
    $entity = _cu2019_grad_find_root_entity($entity);

    if ($entity) {
      try {
        $variables['entity_url'] = $entity->toUrl('canonical')->toString();
      }
      catch (\Exception $e) {
        // We don't need to do anything if a canonical isn't available.
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_block(&$variables) {
  if ($variables['base_plugin_id'] == 'field_block') {
    if ($variables['derivative_plugin_id'] == 'hub_reference:pd_course:hub_field_hub_pd_course_dates') {
      if (empty($variables['content']['#empty_field_block'])) {
        $hub_reference = $variables['content']['#object'];

        if ($hub_reference && ($hub_reference instanceof \Drupal\cu_hub_consumer\Entity\HubReferenceInterface)) {
          /** @var \Drupal\cu_hub_consumer\Hub\Resource $resource_obj */
          $resource_obj= $hub_reference->getResourceObj();

          $valid_dates = FALSE;
          $date_paragraphs = $resource_obj->field_hub_pd_course_dates;

          if (!empty($date_paragraphs)) {
            $comparison_format = 'Ymd';

            foreach($date_paragraphs as $date_paragraph) {
              $daterange = $date_paragraph->field_hub_cd_date->first();

              // Sanity check.
              if ($daterange && ($daterange->getFieldType() == 'daterange')) {
                $start_date = $date_paragraph->field_hub_cd_date->first()->getStartDateTime();
                $end_date = $date_paragraph->field_hub_cd_date->first()->getEndDateTime();

                // Better to filter on the start date if we don't have an end date.
                if (empty($end_date)) {
                  $end_date = $start_date;
                }

                if ($end_date) {
                  $now = new Datetime();
                  $now_date = $now->format($comparison_format);
                  if ($now_date <= $end_date->format($comparison_format)) {
                    $valid_dates = TRUE;
                    break;
                  }
                }
              }
            }
          }

          // If we found no valid course dates, then we will mark the block as if the field has no values at all.
          if (!$valid_dates) {
            $variables['content']['#empty_field_block'] = TRUE;
          }
        }
      }
    }
  }
}

/**
 * Get the root entity.
 *
 * Will recurse through things like paragraphs till we hit a regular entity.
 *
 * @param mixed $entity
 * @return mixed
 */
function _cu2019_grad_find_root_entity($entity) {
  // There might be paragraphs within paragraphs, so let's follow it back to a node.
  if ($entity && ($entity->getEntityTypeId() == 'paragraph')) {
    $entity = _cu2019_grad_find_root_entity($entity->getParentEntity());
  }

  return $entity;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  $variables['breadcrumb_links'] = \Drupal::service('breadcrumb')->build(\Drupal::routeMatch())->getLinks();

  $variables['view_page_urls'] = [];
  $variables['view_page_links'] = [];
  if ($displays = $view->displayHandlers) {
    foreach ($displays as $display_id => $display) {
      if ($display instanceof \Drupal\views\Plugin\views\display\Page) {
        $route_name = sprintf('view.%s.%s', $view->id(), $display_id);
        $url = Url::fromRoute($route_name, [], ['set_active_class' => TRUE]);

        $menu = $display->getOption('menu');
        if (!empty($menu['title'])) {
          $variables['view_page_urls'][$display_id] = $url;
          $variables['view_page_links'][$display_id] = Link::fromTextAndUrl($menu['title'], $url);
        }
      }
    }
  }

  if (in_array($view->id(), ['explore_programs', 'explore_programs_pd'])) {
    $url_degrees = Url::fromRoute('view.explore_programs.page_1', [], ['set_active_class' => TRUE]);
    $url_pd = Url::fromRoute('view.explore_programs_pd.page_1', [], ['set_active_class' => TRUE]);

    $variables['explore_programs_urls'] = [
      'degrees' => $url_degrees,
      'pd' => $url_pd,
    ];
    $variables['explore_programs_links'] = [
      Link::fromTextAndUrl('Degrees', $url_degrees),
      Link::fromTextAndUrl('Professional Development', $url_pd),
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_hub_reference__event(&$variables) {
  $hub_reference = $variables['hub_reference'];

  $variables['single_day'] = TRUE;
  $variables['all_day'] = FALSE;
  if ($hub_reference->hasField('hub_field_hub_event_date') && !$hub_reference->hub_field_hub_event_date->isEmpty()) {
    $start_date = $hub_reference->hub_field_hub_event_date->first()->start_date;
    $end_date = $hub_reference->hub_field_hub_event_date->first()->end_date;

    if ($start_date && $end_date) {
      $variables['single_day'] = ($start_date->format('Y-m-d') == $end_date->format('Y-m-d'));

      if (($start_date->format('H:i') == '00:00') && ($end_date->format('H:i') == '23:59')) {
        $variables['all_day'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_field__hub_reference__hub_field_hub_event_date(&$variables) {
  $variables['hub_reference'] = $variables['element']['#object'];

  $variables['single_day'] = TRUE;
  $variables['all_day'] = FALSE;
  if ($hub_reference = $variables['element']['#object']) {
    if ($hub_reference->hasField('hub_field_hub_event_date') && !$hub_reference->hub_field_hub_event_date->isEmpty()) {
      $start_date = $hub_reference->hub_field_hub_event_date->first()->start_date;
      $end_date = $hub_reference->hub_field_hub_event_date->first()->end_date;

      $variables['single_day'] = ($start_date->format('Y-m-d') == $end_date->format('Y-m-d'));

      if (($start_date->format('H:i') == '00:00') && ($end_date->format('H:i') == '23:59')) {
        $variables['all_day'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_hub_resource_field__field_hub_fac_spotlight_type(&$variables) {
  $value = &$variables['items'][0]['content']['#context']['value'];
  $value = _cu2019_grad_faculty_spotlight_type($value);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_node__faculty_alumni_spotlight(&$variables) {
  $type = $variables['node']->get('field_fac_spotlight_type')->first()->getValue()['value'];
  $variables['highlite_tag'] = _cu2019_grad_faculty_spotlight_type($type);
  return;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_hub_resource_field__paragraph_course_date__field_hub_cd_date(&$variables) {
  $comparison_format = 'Ymd';

  foreach ($variables['field_items'] as $key => $item) {
    $start_date =  $item->getStartDateTime();;
    $end_date = $item->getEndDateTime();

    if ($start_date) {
      // Better to filter on the start date if we don't have an end date.
      if (empty($end_date)) {
        $end_date = $start_date;
      }

      if ($end_date) {
        $now = new Datetime();

        // Kick out any past dates from being visible.
        $now_date = $now->format($comparison_format);
        if ($now_date > $end_date->format($comparison_format)) {
          $variables['items'][$key] = [];
          continue;
        }

        if ($start_date->format($comparison_format) != $end_date->format($comparison_format)) {
          $variables['items'][$key]['multi_date'] = TRUE;
        }
      }

      $variables['items'][$key]['content']['month'] = $start_date->format('M');
      $variables['items'][$key]['content']['day'] = $start_date->format('j');
    }
  }
}

function cu2019_grad_preprocess_field__hub_reference__hub_field_hub_pd_course_dates(&$variables) {
  $comparison_format = 'Ymd';

  foreach ($variables['items'] as $key => $item) {
    /** @var \Drupal\cu_hub_consumer\Hub\Resource $resource_obj */
    $resource_obj= $item['content']['#resource_obj'];
    $daterange = $resource_obj->field_hub_cd_date->first();

    // Sanity check.
    if ($daterange && ($daterange->getFieldType() == 'daterange')) {
      $start_date = $resource_obj->field_hub_cd_date->first()->getStartDateTime();
      $end_date = $resource_obj->field_hub_cd_date->first()->getEndDateTime();

      // Better to filter on the start date if we don't have an end date.
      if (empty($end_date)) {
        $end_date = $start_date;
      }

      if ($end_date) {
        $now = new Datetime();

        $now_date = $now->format($comparison_format);
        if ($now_date > $end_date->format($comparison_format)) {
          $variables['items'][$key] = [];
          continue;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_views_view_field__cu_event_references__block_2__field_event_date(&$variables) {
  /** @var \Drupal\cu_hub_consumer\Entity\HubReference $entity */
  $entity = $variables['row']->_entity;
  $dateRange = $entity->get('hub_field_hub_event_date')->first();
  $start_date = $dateRange->get('value')->getDateTime()->format('M j');
  $end_date = $dateRange->get('end_value')->getDateTime()->format('M j');

  $variables['multi_day'] = ($start_date != $end_date)? TRUE : FALSE;
  list($variables['start_month'], $variables['start_day']) = explode(' ', $dateRange->get('value')->getDateTime()->format('M j'));
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_hub_resource__taxonomy_term__program_availability(&$variables) {
  if (!$variables['resource_obj']->getProcessedData()['name']) {
    return;
  }

  $name = $variables['resource_obj']->getProcessedData()['name']->first()->getValue();

  // "This program is offered" is stated in the template for this taxonomy term.
  // @see hub-resource--taxonomy-term--program-availability.html.twig
  if ($name == 'Hybrid') {
    $variables['content']['#markup'] = 'as a hybrid program which combines elements of online learning with traditional on-campus learning. Instead of taking every class on-campus, you can earn up to half or more credits through online classes.';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_paragraph__grad_feature_tile_item(&$variables) {
  if (isset($variables['content']['field_tile_item_file_link']['#items'])) {
    $file_id = $variables['content']['field_tile_item_file_link'][0]['#media']->get('field_document')->first()->getValue()['target_id'];
    $file = Drupal::service('entity_type.manager')->getStorage('file')->load($file_id);

    $variables['tile_link'] = $file->createFileUrl();
  }
  else {
    if (!empty($variables['content']['field_tile_item_link']['#elements'][0])) {
      $variables['tile_link'] = $variables['content']['field_tile_item_link'][0]['#url']->toString();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_hub_resource__paragraph__formatted_text(&$variables) {
  $resource_obj = $variables['resource_obj'];
  if ($resource_obj->hasField('field_formatted_text_style') && !$resource_obj->field_formatted_text_style->isEmpty()) {
    $style = $resource_obj->field_formatted_text_style->getString();
    if ($style == 'collapsed') {
      $variables['collapsed_text'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_hub_resource__paragraph__image_video(&$variables) {
  $resource_obj = $variables['resource_obj'];
  if ($resource_obj->hasField('field_image_video_media') && !$resource_obj->field_image_video_media->isEmpty()) {
    if ($media_resource = $resource_obj->field_image_video_media->first()) {
      $resource_type_id = $media_resource->getResourceTypeId();

      // Sanity check.
      if (strpos($resource_type_id, 'media:') === 0) {
        list(,$variables['media_type']) = explode(':', $media_resource->getResourceTypeId(), 2);

        if ($variables['media_type'] == 'video') {
          $provider_manager = \Drupal::service('video_embed_field.provider_manager');
          $provider = $provider_manager->loadProviderFromInput($media_resource->field_media_video_embed_field->value);
          if ($provider) {
            $video =  $provider->renderEmbedCode(560, 315, FALSE);
            $variables['video'] = $video;
          }
        }
      }
    }

  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_hub_resource__paragraph__next_step(&$variables) {
  $resource_obj = $variables['resource_obj'];
  if ($resource_obj->hasField('field_next_step_icon') && !$resource_obj->field_next_step_icon->isEmpty()) {
    $variables['icon'] = $resource_obj->field_next_step_icon->getString();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_hub_resource__paragraph__hub_feature_tile_item(&$variables) {
  if (isset($variables['content']['field_hub_tile_item_file_link']['#items'])) {
    $file_id = $variables['content']['field_hub_tile_item_file_link'][0]['#media']->get('field_document')->first()->getValue()['target_id'];
    $file = Drupal::service('entity_type.manager')->getStorage('file')->load($file_id);

    $variables['tile_link'] = $file->createFileUrl();
  }
  else {
    if (!empty($variables['content']['field_hub_tile_item_link']['#elements'][0])) {
      $variables['tile_link'] = $variables['content']['field_hub_tile_item_link']['#elements'][0]['#url']->toString();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_field__hub_reference__title(&$variables) {
  if ($hub_reference = $variables['element']['#object']) {
    if ($hub_resource = $hub_reference->getResourceObj()) {
      if ($headline = $hub_resource->headline()) {
        $variables['headline'] = $headline;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_field__hub_reference__hub_field_hub_faculty_name(&$variables) {
  if ($hub_reference = $variables['element']['#object']) {
    if ($hub_resource = $hub_reference->getResourceObj()) {
      if ($headline = $hub_resource->headline()) {
        $variables['headline'] = $headline;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_hub_resource__paragraph__manual_featured_event(&$variables) {
  /** @var \Drupal\cu_hub_consumer\Hub\Resource $resource */
  $resource = $variables['resource_obj'];
  if (isset($resource->getProcessedData()['field_mfse_date'])) {
    $dateRange = $resource->getProcessedData()['field_mfse_date']->first();
    $start_date = $dateRange->getValue()['value'];
    $end_date = $dateRange->getValue()['end_value'];

    $resource->isPublished();

    $variables['multi_day'] = ($start_date != $end_date)? TRUE : FALSE;

    $start_date = DrupalDateTime::createFromFormat('Y-m-d', $start_date, 'UTC');

    list($variables['start_month'], $variables['start_day']) = explode(' ', $start_date->format('M j'));
    $variables['content']['field_mfse_date']['#elements'][0]['start_date']['#attributes']['datetime'] = $start_date->format('c');
    $resource->bundle = $resource->getResourceType()->getResourceTypeDefinition()->id();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_hub_resource__paragraph__manual_featured_set_item(&$variables) {
  /** @var \Drupal\cu_hub_consumer\Hub\Resource $resource */
  $resource = $variables['resource_obj'];
  $resource->bundle = $resource->getResourceType()->getResourceTypeDefinition()->id();
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function cu2019_grad_form_system_theme_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $form['logo']['svg_logo'] = [
    '#type' => 'textarea',
    '#title' => t('SVG logo'),
    '#description' => t('Paste in the SVG code here.'),
    '#default_value' => theme_get_setting('svg_logo'),
  ];
}

function _cu2019_grad_get_svg_logo() {
  static $svg_logo;

  if (!isset($svg_logo)) {
    $svg_logo = '';

    if ($svg_logo_raw = theme_get_setting('svg_logo')) {
      // Just in case the sanitizer class isn't found, we wrap in try/catch.
      try {
        $sanitizer = new \enshrined\svgSanitize\Sanitizer;
        $svg_logo = $sanitizer->sanitize($svg_logo_raw);
      }
      catch (\Exception $e) {
        // @todo Should we log a warning or something?
      }
    }
  }

  return $svg_logo;
}

// Returns a render array with the sub-tree of the current active link.
function _cu2019_grad_get_menu_sub_tree($menu_name = 'main') {
  $menu_tree = \Drupal::menuTree();

  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);
  $currentLinkId = reset($parameters->activeTrail);

  if ($currentLinkId) {
    $parameters->setRoot($currentLinkId);
    $parameters->setMinDepth(1);
    $parameters->setMaxDepth(1);
    $tree = $menu_tree->load($menu_name, $parameters);

    // Transform the tree using the manipulators you want.
    $manipulators = array(
      // Only show links that are accessible for the current user.
      array('callable' => 'menu.default_tree_manipulators:checkAccess'),
      // Use the default sorting of menu links.
      array('callable' => 'menu.default_tree_manipulators:generateIndexAndSort'),
    );
    $tree = $menu_tree->transform($tree, $manipulators);

    // Finally, build a renderable array.
    $build = $menu_tree->build($tree);

    // Mark this as being in the special "embedded" region so it's available in
    // template suggestions.
    $build['#attributes']['data-region'] = 'embedded';

    return $build;
  }
}

// Returns a render array with the sub-tree of the current active link.
function _cu2019_grad_get_menu_sibling_tree($menu_name = 'main') {
  $menu_tree = \Drupal::menuTree();

  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);
  $currentLinkId = reset($parameters->activeTrail);
  $parentLinkId = next($parameters->activeTrail);

  if ($parentLinkId) {
    $parameters->setRoot($parentLinkId);
    $parameters->setMinDepth(1);
    $parameters->setMaxDepth(1);
    $tree = $menu_tree->load($menu_name, $parameters);

    // Transform the tree using the manipulators you want.
    $manipulators = array(
      // Only show links that are accessible for the current user.
      array('callable' => 'menu.default_tree_manipulators:checkAccess'),
      // Use the default sorting of menu links.
      array('callable' => 'menu.default_tree_manipulators:generateIndexAndSort'),
    );
    $tree = $menu_tree->transform($tree, $manipulators);

    // Finally, build a renderable array.
    $build = $menu_tree->build($tree);

    // Mark this as being in the special "embedded" region so it's available in
    // template suggestions.
    $build['#attributes']['data-region'] = 'embedded';

    return $build;
  }
}

/**
 * Determines the correct wording for faculty spotlight type fields.
 *
 * @param string $type
 *  Acceptable values are fac or alum
 * @return string
 */
function _cu2019_grad_faculty_spotlight_type($type = NULL) {
  switch ($type) {
    case 'fac':
      $value = 'Faculty spotlight';
      break;
    case 'alum':
      $value = 'Alumni spotlight';
      break;
    default:
      $value = '';
      break;
  }

  return $value;
}
