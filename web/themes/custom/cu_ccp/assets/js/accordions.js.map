{"version":3,"names":[],"mappings":"","sources":["accordions.js"],"sourcesContent":["/*\n*   This content is licensed according to the W3C Software License at\n*   https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n*\n*   Simple accordion pattern example\n*/\n/* Tabs */\n'use strict';\n\n(function ($, Drupal) {\n  Drupal.behaviors.Tabs = {\n    attach: function (context, settings) {\n\n      Array.prototype.slice.call(document.querySelectorAll('.accordion')).forEach(function (accordion_element) {\n        $(accordion_element).once('accordion').each(function() {\n          var accordion = this;\n          \n          // Allow for multiple accordion sections to be expanded at the same time\n          var allowMultiple = accordion.hasAttribute('data-allow-multiple');\n          // Allow for each toggle to both open and close individually\n          var allowToggle = (allowMultiple) ? allowMultiple : accordion.hasAttribute('data-allow-toggle');\n\n          // Create the array of toggle elements for the accordion group\n          var triggers = Array.prototype.slice.call(accordion.querySelectorAll('dt>button'));\n          var panels = Array.prototype.slice.call(accordion.querySelectorAll('dd'));\n\n          accordion.addEventListener('click', function (event) {\n            var target = event.target;\n\n            if (target.tagName === \"BUTTON\" || target.getAttribute('role') == 'button') {\n              // Check if the current toggle is expanded.\n              if($(this).parent().parent().hasClass('view-filters') === true) {\n                var filters = $(this).parent().parent();\n              }\n              var isExpanded = target.getAttribute('aria-expanded') == 'true';\n\n              var active = accordion.querySelector('[aria-expanded=\"true\"]');\n\n              // without allowMultiple, close the open accordion\n              if (!allowMultiple && active && active !== target) {\n                // Set the expanded state on the triggering element\n                active.setAttribute('aria-expanded', 'false');\n                // Hide the accordion sections, using aria-controls to specify the desired section\n                document.getElementById(active.getAttribute('aria-controls')).setAttribute('hidden', '');\n\n                // When toggling is not allowed, clean up disabled state\n                if (!allowToggle) {\n                  active.removeAttribute('aria-disabled');\n                }\n              }\n\n              if (!isExpanded) {\n                // Set the expanded state on the triggering element\n                target.setAttribute('aria-expanded', 'true');\n                // Hide the accordion sections, using aria-controls to specify the desired section\n                document.getElementById(target.getAttribute('aria-controls')).removeAttribute('hidden');\n\n\n                if(filters) {\n                  var filterMenu = document.getElementById(target.getAttribute('aria-controls'));\n                  console.log($(filterMenu));\n                  $(filters).css({\n                    'margin-bottom': $(filterMenu).outerHeight()\n                  })\n                }\n                // If toggling is not allowed, set disabled state on trigger\n                if (!allowToggle) {\n                  target.setAttribute('aria-disabled', 'true');\n                }\n              }\n              else if (allowToggle && isExpanded) {\n                // Set the expanded state on the triggering element\n                target.setAttribute('aria-expanded', 'false');\n                $(filters).removeAttr('style');\n                // Hide the accordion sections, using aria-controls to specify the desired section\n                document.getElementById(target.getAttribute('aria-controls')).setAttribute('hidden', '');\n              }\n\n              event.preventDefault();\n            }\n          });\n\n          // Bind keyboard behaviors on the main accordion container\n          accordion.addEventListener('keydown', function (event) {\n            var target = event.target;\n            var key = event.which.toString();\n            // 33 = Page Up, 34 = Page Down\n            var ctrlModifier = (event.ctrlKey && key.match(/33|34/));\n\n            // Is this coming from an accordion header?\n            if (target.tagName === \"BUTTON\") {\n              // Up/ Down arrow and Control + Page Up/ Page Down keyboard operations\n              // 38 = Up, 40 = Down\n              if (key.match(/38|40/) || ctrlModifier) {\n                var index = triggers.indexOf(target);\n                var direction = (key.match(/34|40/)) ? 1 : -1;\n                var length = triggers.length;\n                var newIndex = (index + length + direction) % length;\n\n                triggers[newIndex].focus();\n\n                event.preventDefault();\n              }\n              else if (key.match(/35|36/)) {\n                // 35 = End, 36 = Home keyboard operations\n                switch (key) {\n                  // Go to first accordion\n                  case '36':\n                    triggers[0].focus();\n                    break;\n                    // Go to last accordion\n                  case '35':\n                    triggers[triggers.length - 1].focus();\n                    break;\n                }\n\n                event.preventDefault();\n              }\n            }\n            else if (ctrlModifier) {\n              // Control + Page Up/ Page Down keyboard operations\n              // Catches events that happen inside of panels\n              panels.forEach(function (panel, index) {\n                if (panel.contains(target)) {\n                  triggers[index].focus();\n\n                  event.preventDefault();\n                }\n              });\n            }\n          });\n\n          // Minor setup: will set disabled state, via aria-disabled, to an\n          // expanded/ active accordion which is not allowed to be toggled close\n          if (!allowToggle) {\n            // Get the first expanded/ active accordion\n            var expanded = accordion.querySelector('[aria-expanded=\"true\"]');\n\n            // If an expanded/ active accordion is found, disable\n            if (expanded) {\n              expanded.setAttribute('aria-disabled', 'true');\n            }\n          }\n        });\n\n      });\n\n    }\n  };\n})(jQuery, Drupal);\n"],"file":"accordions.js"}